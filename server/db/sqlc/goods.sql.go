// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: goods.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createGoods = `-- name: CreateGoods :one
INSERT INTO goods(
  user_id,
  title,
  price,
  description,
  default_image_url
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING goods.goods_id, goods.user_id, goods.title, goods.price, goods.description, goods.default_image_url, goods.created_at, goods.updated_at
`

type CreateGoodsParams struct {
	UserID          int32  `json:"user_id"`
	Title           string `json:"title"`
	Price           int32  `json:"price"`
	Description     string `json:"description"`
	DefaultImageUrl string `json:"default_image_url"`
}

func (q *Queries) CreateGoods(ctx context.Context, arg CreateGoodsParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, createGoods,
		arg.UserID,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.DefaultImageUrl,
	)
	var i Good
	err := row.Scan(
		&i.GoodsID,
		&i.UserID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.DefaultImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGoods = `-- name: DeleteGoods :exec
DELETE
FROM goods
WHERE goods.goods_id = $1
`

func (q *Queries) DeleteGoods(ctx context.Context, goodsID int32) error {
	_, err := q.db.ExecContext(ctx, deleteGoods, goodsID)
	return err
}

const getGoods = `-- name: GetGoods :one
SELECT
  goods.goods_id, goods.user_id, goods.title, goods.price, goods.description, goods.default_image_url, goods.created_at, goods.updated_at,
  string_agg(categories.title, ',' ORDER BY categories.created_at DESC) as category_titles
FROM goods
JOIN goods_categories USING(goods_id)
JOIN categories USING(category_id)
WHERE goods.goods_id = $1
GROUP BY goods.goods_id
`

type GetGoodsRow struct {
	GoodsID         int32     `json:"goods_id"`
	UserID          int32     `json:"user_id"`
	Title           string    `json:"title"`
	Price           int32     `json:"price"`
	Description     string    `json:"description"`
	DefaultImageUrl string    `json:"default_image_url"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	CategoryTitles  []byte    `json:"category_titles"`
}

func (q *Queries) GetGoods(ctx context.Context, goodsID int32) (GetGoodsRow, error) {
	row := q.db.QueryRowContext(ctx, getGoods, goodsID)
	var i GetGoodsRow
	err := row.Scan(
		&i.GoodsID,
		&i.UserID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.DefaultImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryTitles,
	)
	return i, err
}

const getGoodsList = `-- name: GetGoodsList :many
SELECT
  goods.goods_id, goods.user_id, goods.title, goods.price, goods.description, goods.default_image_url, goods.created_at, goods.updated_at
FROM goods
ORDER BY goods.created_at DESC
LIMIT $1 OFFSET $2
`

type GetGoodsListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetGoodsList(ctx context.Context, arg GetGoodsListParams) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, getGoodsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Good{}
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.GoodsID,
			&i.UserID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.DefaultImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoods = `-- name: UpdateGoods :exec
UPDATE goods
SET
  title = coalesce($1, title),
  price = coalesce($2, price),
  description = coalesce($3, description),
  default_image_url = coalesce($4, default_image_url),
  updated_at = now()
WHERE goods_id = $5
`

type UpdateGoodsParams struct {
	Title           sql.NullString `json:"title"`
	Price           sql.NullInt32  `json:"price"`
	Description     sql.NullString `json:"description"`
	DefaultImageUrl sql.NullString `json:"default_image_url"`
	GoodsID         int32          `json:"goods_id"`
}

func (q *Queries) UpdateGoods(ctx context.Context, arg UpdateGoodsParams) error {
	_, err := q.db.ExecContext(ctx, updateGoods,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.DefaultImageUrl,
		arg.GoodsID,
	)
	return err
}

const updateGoodsOnlyUpdatedAt = `-- name: UpdateGoodsOnlyUpdatedAt :exec
UPDATE goods
SET
  updated_at = now()
WHERE goods_id = $1
`

func (q *Queries) UpdateGoodsOnlyUpdatedAt(ctx context.Context, goodsID int32) error {
	_, err := q.db.ExecContext(ctx, updateGoodsOnlyUpdatedAt, goodsID)
	return err
}
